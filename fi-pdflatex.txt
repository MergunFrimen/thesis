# Introduction {#introduction .unnumbered}

[]{#chap:introduction label="chap:introduction"}

Partial atomic charges are real numbers that describe a molecule's
electron density. They are used in various fields of computational
chemistry, such as molecular dynamics, molecular docking, and
pharmacophore design. [@racek2022thesis] While partial atomic charges
cannot be measured experimentally, they can be calculated using
computational methods based on quantum mechanics. [@gupta2015principles]
However, these methods pose significant computational challenges,
particularly for larger molecules, leading researchers to employ faster,
albeit less accurate, empirical methods. [@schindler2019thesis]

Atomic Charge Calculator II [@racek2020acc2] and αCharges
[@schindler2023alphacharges] are two web-based applications that allow
rapid calculations of partial atomic charges by empirical methods. The
Atomic Charge Calculator II application incorporates the Litemol viewer
[@sehnal2017litemol] to enable users to visualize the calculated
charges. However, the Litemol viewer is no longer maintained, and its
replacement, the Mol\* viewer [@sehnal2021molstar], does not currently
support the visualization of partial atomic charges.

The absence of this functionality in the Mol\* viewer presents a
significant limitation for researchers in computational chemistry.
Therefore, this thesis aims to address this limitation by extending the
Mol\* viewer to support the visualization of partial atomic charges and,
subsequently, incorporating the enhanced Mol\* viewer into the Atomic
Charge Calculator II and αCharges web applications.

Chapter [1](#chapter:theory){reference-type="ref"
reference="chapter:theory"} introduces the theoretical concepts of
molecular structures and partial atomic charges, along with the chemical
file formats utilized in this work. Building on this foundation, Chapter
[2](#chapter:visualizing_molecular_data){reference-type="ref"
reference="chapter:visualizing_molecular_data"} discusses the various
visualization methods and software tools for visualizing molecular
structures. Chapter
[3](#chapter:molstar_partial_charges_extension){reference-type="ref"
reference="chapter:molstar_partial_charges_extension"} then describes
the implementation of the Mol\* viewer extension for visualizing partial
atomic charges. Finally, the extended Mol\* viewer is integrated into
the Atomic Charge Calculator II and αCharges web applications, as
detailed in Chapters
[4](#chapter:atomic_charge_calculator_ii){reference-type="ref"
reference="chapter:atomic_charge_calculator_ii"} and
[5](#chapter:alphacharges){reference-type="ref"
reference="chapter:alphacharges"}.

# Theory {#chapter:theory}

Theoretical concepts are fundamental to the study of computational
chemistry, providing a framework for analyzing molecular structures and
properties. This chapter focuses on four key areas of theory, beginning
with an overview of molecular structures in Section
[1.1](#section:molecular_structure){reference-type="ref"
reference="section:molecular_structure"}. Section
[1.2](#section:partial_atomic_charges){reference-type="ref"
reference="section:partial_atomic_charges"} explores partial atomic
charges and their importance in computational chemistry. Lastly, Section
[1.3](#section:chemical_file_formats){reference-type="ref"
reference="section:chemical_file_formats"} examines chemical file
formats utilized in this work.

## Molecular structure {#section:molecular_structure}

Molecules are the smallest units of a chemical compound that retain the
compound's chemical properties. They consist of two or more atoms
connected by chemical bonds. Molecules vary widely in size and
complexity, ranging from simple molecules such as oxygen to complex
molecules such as proteins and DNA. [@britannica_molecule]

This thesis works with two main categories of molecules: micromolecules
and macromolecules. The following sections provide an overview of these
two categories, along with an explanation of the structure of polymers,
and finally, explain conformation isomerism of molecular structures.

### Micromolecules

Micromolecules, also known as small molecules or monomers, are molecules
of low molecular weight that are relatively compact in size, and
typically composed of a low number of atoms. Their small size allows us
to describe them simply by the composition of their atoms and bonds.
Micromolecules play crucial roles in various biological processes and
are involved in numerous chemical reactions in living organisms.
[@clark2018biology; @micromolecule_definition] Examples of
micromolecules include water, glucose, or ethanol. Additionally, many
drugs are small molecules. [@smallmoleculewiki]

Figure [1.1](#fig:aspirin){reference-type="ref" reference="fig:aspirin"}
shows the structure of aspirin [@pubchem_aspirin], a drug used to treat
pain, fever, or inflammation.

<figure id="fig:aspirin">
<div class="center">
<img src="figures/aspirin.png" style="width:7cm" />
</div>
<figcaption>Aspirin, a drug used to treat pain, fever, or
inflammation.</figcaption>
</figure>

### Macromolecules

Macromolecules are large molecules composed of many atoms, often
thousands or even millions. They are typically formed through
polymerization, where smaller subunits, called monomers, combine to form
larger chain-like structures called polymers, such as proteins, nucleic
acids, and carbohydrates. Macromolecules are crucial for the structure
and function of cells and organisms. Their large size allows for complex
interactions and the ability to carry out specialized tasks within
living systems. [@clark2018biology; @gu2009structural]

Figure [1.2](#fig:hemoglobin){reference-type="ref"
reference="fig:hemoglobin"} depicts a protein called hemoglobin, which
is responsible for transporting oxygen throughout the body.

<figure id="fig:hemoglobin">
<div class="center">
<img src="figures/hemoglobin.png" style="width:7cm" />
</div>
<figcaption>Hemoglobin, a protein for transporting oxygen throughout the
body.</figcaption>
</figure>

### Polymer structure {#section:polymer_structure}

Describing macromolecules solely by their atoms and bonds becomes
impractical due to the many atoms involved. Instead, macromolecules are
characterized by their residues and chains.

A residue refers to a specific monomer or building block within a
macromolecule. Each residue corresponds to an amino acid and nucleotide
for proteins and nucleic acids, respectively. Chemical bonds link
residues together to form chains. Each chain within a macromolecule is
assigned a unique identifier, usually described by letters, starting
with the letter A. Residues inside a chain are identified by a number,
starting with the number 1. [@gu2009structural]

The structure of a macromolecule can be described at different levels,
each providing a distinct perspective and level of abstraction. The
primary structure refers to the sequence of monomers in the polymer
chain. The secondary structure involves local folding patterns within
the polymer chain, such as alpha helices and beta sheets in proteins.
The tertiary structure encompasses the overall 3D shape of the
macromolecule. Finally, the quaternary structure describes the
interactions between multiple macromolecules.
[@branden1999introduction; @pdb101_hierarchical]

Figure [\[fig:structure1\]](#fig:structure1){reference-type="ref"
reference="fig:structure1"} displays the ternary structure of a protein
consisting of two chains, A and B. The figure focuses on chain B, which
is colored to emphasize its primary structure - the sequence of its
residues. Figure
[\[fig:structure2\]](#fig:structure2){reference-type="ref"
reference="fig:structure2"} depicts one of the residues of chain B, ARG
19, which corresponds to the 19th residue in chain B and represents the
amino acid arginine.

<figure id="fig:structure">

<figcaption>Hierarchy of a protein structure.</figcaption>
</figure>

### Conformational isomers {#section:alternative_conformations}

Conformational isomers, or alternative conformations, are different
spatial arrangements of atoms within a molecule.
[@conformational_isomerism] Figure
[1.4](#fig:alternative_conformations){reference-type="ref"
reference="fig:alternative_conformations"} shows two conformational
isomers of adenosine triphosphate. One conformation is colored yellow,
while the other is colored blue.

<figure id="fig:alternative_conformations">
<div class="center">
<img src="figures/alt_conformations.png" style="width:7cm" />
</div>
<figcaption>Alternative conformations of ATP.</figcaption>
</figure>

## Partial atomic charges {#section:partial_atomic_charges}

When two atoms form a chemical bond, they share electrons. The electrons
are not evenly shared between the two atoms due to differences in their
electronegativities [^1]. Atoms with higher electronegativities attract
electrons more strongly than atoms with lower electronegativities. This
uneven distribution of electron density influences the physical
properties of the molecule and determines how it interacts with other
molecules or substances. One way of representing this uneven
distribution of electron density is by assigning partial atomic charges
to individual atoms within the molecule. [@schindler2019thesis]

Partial atomic charges are numerical values assigned to individual atoms
within a molecule, representing their contribution to the distribution
of electron density. Atoms with higher electronegativities have a
partial negative charge (denoted as $\delta-$), while atoms with lower
electronegativities have a partial positive charge (denoted as
$\delta+$). [@racek2022thesis]

Figure [1.5](#fig:psilocybin){reference-type="ref"
reference="fig:psilocybin"} demonstrates the unequal distribution of
electron density in psilocybin [@pubchem_psilocybine], a psychedelic
compound found in certain species of mushrooms. The figure shows the
partial atomic charges colored by their values. The partial negative
charges are colored red, while the partial positive charges are colored
blue.

<figure id="fig:psilocybin">
<div class="center">
<img src="figures/psilocybine.png" style="width:7cm" />
</div>
<figcaption>Partial atomic charges of psilocybin.</figcaption>
</figure>

There are several applications for partial atomic charges in
computational chemistry, such as molecular dynamics [@MIAO20191049],
molecular docking [@docking], and pharmacophore design
[@stalke2011meaningful]. [@racek2022thesis; @schindler2021thesis]

It is important to note that partial charges are a theoretical concept
and cannot be directly measured or observed; they can only be calculated
using computational methods. [@schindler2019thesis]

### Calculation methods {#section:calculating_partial_atomic_charges}

One approach to calculating partial atomic charges is by quantum
mechanical methods [@gupta2015principles]. However, these methods are
computationally expensive and require a lot of computational resources.
Another approach is by empirical methods.

Empirical methods aim to produce charges comparable to those obtained
through quantum mechanical methods while keeping the computational
complexity manageable. Empirical methods can contain a variety of
parameters. These parameters are typically derived from experimental
data or quantum mechanical calculations. [@racek2022thesis]

There are several empirical methods for calculating partial atomic
charges, such as SQE [@nistor2006generalization], EEM
[@mortier1986electronegativity], and QEq [@rappe1991charge]. These
methods are implemented in the ChargeFW2 [@racek2020acc2] program, which
is used in this thesis.

### ChargeFW2 {#section:chargfw2}

ChargeFW2 is a C++ program that calculates partial atomic charges by
empirical methods. The program supports 20 empirical methods, including
SQE, EEM, and QEq, which were mentioned previously. It provides a
command-line interface for running calculations and supports several
file formats for input and output. [@racek2020acc2]

## Chemical file formats {#section:chemical_file_formats}

Chemical file formats are used to store molecular data in a
computer-readable format. There are several file formats for storing
molecular data, each suited to a specific purpose.

This section explores the SDF and MOL2 file formats, commonly used for
storing small molecules, and the PDB and mmCIF file formats, commonly
used for storing macromolecules, such as proteins.

### SDF {#subsection:sdf}

The Structure-Data File (SDF) is a widely used text-based chemical file
format used to describe the atoms, bonds, and atomic coordinates of
small molecules. It acts as a container for the MOL V2000 and V3000 file
formats, allowing the storage of multiple molecules in a single file.
The MOL V2000 format is a fixed-width format that can store up to 999
atoms and bonds, while the MOL V3000 format removes this limitation,
enabling the storage of larger molecules
[@mdl_ctfile; @wikipedia_ctfile].

Figure [1.6](#fig:sdf){reference-type="ref" reference="fig:sdf"} depicts
an SDF file containing the structure of ethanol in the MOL V2000 format.
This format consists of a header section, an atom section, and a bond
section. The header section contains the molecule's name, as well as the
number of atoms and bonds. The atom and bond sections provide the
corresponding atom and bond information, respectively
[@belford2017anatomy].

<figure id="fig:sdf">
<div class="center">
<img src="figures/sdf_file_format.png" style="width:11cm" />
</div>
<figcaption>SDF file containing the structure of ethanol. <span
class="citation" data-cites="belford2017anatomy"></span></figcaption>
</figure>

### MOL2 {#subsection:mol2}

The Mol2 file format is another text-based format used for storing small
molecular structures and their associated properties. It supports
multiple conformations of a molecule and is commonly utilized in
molecular modeling and cheminformatics applications. Compared to the SDF
format, Mol2 provides more flexibility and additional features by
supporting various record types, including custom charge data.[@manish]

Figure [1.7](#fig:mol2){reference-type="ref" reference="fig:mol2"}
illustrates the contents of an MOL2 file containing the structure of
ethanol. Notice the similarity between the MOL2 and SDF formats. Both
formats contain the same information about atoms and bonds. However, the
MOL2 format offers greater flexibility in its structure.

<figure id="fig:mol2">
<div class="center">
<img src="figures/mol2_file_format.png" style="width:11cm" />
</div>
<figcaption>MOL2 file containing the structure of ethanol.</figcaption>
</figure>

### PDB {#subsection:pdb}

The Protein Data Bank (PDB) file format is widely employed for storing
three-dimensional structures of proteins, nucleic acids, and other
macromolecules. PDB files contain vital information such as atomic
coordinates, secondary structure, and other essential details required
for understanding macromolecular structures. The PDB format has found
extensive use in structural biology, bioinformatics, and related fields.
[@pdb101]

The PDB format consists of rows of records. Each record begins with a
keyword identifying the record type, such as ATOM, HETATM, or CONECT.
Figure [1.8](#fig:pdb){reference-type="ref" reference="fig:pdb"}
displays the ATOM record section of a PDB file containing the structure
of a hemoglobin protein. This record section contains the atomic
coordinates of the protein's atoms and other information, such as the
atom's name, residue name, and residue number. [@chimera_pqrfile]

<figure id="fig:pdb">
<div class="center">
<img src="figures/pdb_format.png" style="width:11cm" />
</div>
<figcaption>The ATOM record section of a PDB file containing the
structure of a hemoglobin protein.</figcaption>
</figure>

### PQR {#subsection:pqr}

The PQR format is a non-standard variant of the PDB format that enables
users to include partial atomic charges and radii parameters in the
existing PDB data. It replaces the Occupancy and B-factor fields (see
Figure [1.8](#fig:pdb){reference-type="ref" reference="fig:pdb"}) with
fields for partial atomic charges and radii. [@pqrfile; @apbs_pqrfile]
Despite the PQR format being non-standard, it is still used in some
applications, such as the Atomic Charge Calculator II, for storing
partial atomic charges. [@racek2020acc2].

### mmCIF {#subsection:mmcif}

The mmCIF format, also known as PDBx/mmCIF, offers an enhanced and
flexible representation of macromolecular crystallography data compared
to the PDB format. One of its most significant advantages is the
utilization of data dictionaries, allowing users to define new data
items and incorporate additional information into the file. Unlike other
formats, mmCIF does not limit column width and entry count, making it
more flexible and accommodating for storing large amounts of data
[@qtpie].

The mmCIF file format stores all data items in a relational database
format. Data items are stored in separate tables. The tables are linked
together with unique identifiers (pointers). Furthermore, a unique token
identifies and references each data item in the file. A token comprises
a category name and an attribute name separated by a dot. For example,
the token `_atom_site.id` refers to the `id` data item in the
`_atom_site` category. Furthermore, the mmCIF format supports two forms
of storing data items: key-value and tabular. Key-value data items
contain a single value, while tabular data items contain multiple
values. Multi-valued data items are represented as a list of values
separated by a newline character. [@pdb101]

Figure [1.9](#fig:mmcif){reference-type="ref" reference="fig:mmcif"}
depicts the `_atom_site` category in the mmCIF file containing
hemoglobin. This category is represented in tabular form, indicated by
the `_loop` token on the first row. Each row of the table corresponds to
an atom in the structure. The `_atom_site` category contains several
data items, including the following [@mmcif_dictionary]:

-   `_atom_site.id`: a unique identifier for each atom in the structure

-   `_atom_site.label_atom_id`: the name of the atom (unique\
    within the residue)

-   `_atom_site.label_comp_id`: the name the residue containing the atom

-   `_atom_site.label_seq_id`: the sequence number of the residue
    containing the atom

-   `_atom_site.label_comp_id`: the name of the chain containing the
    atom

-   `_atom_site.label_alt_id`: the alternate conformation indicator for
    the atom

<figure id="fig:mmcif">
<div class="center">
<img src="figures/3bj1_mmcif.png" style="width:11cm" />
</div>
<figcaption>Tabular representation of the <code>_atom_site</code> data
items in the mmCIF format for hemoglobin.</figcaption>
</figure>

# Visualizing molecular data {#chapter:visualizing_molecular_data}

The chemical file formats discussed in Section
[1.3](#section:chemical_file_formats){reference-type="ref"
reference="section:chemical_file_formats"} provide a convenient way of
storing molecular data. However, they alone do not provide an efficient
way of interpreting the data, especially for large structures. The data
needs to be visualized to comprehend and extract meaningful insights
from the data. [@gu2009structural]

This chapter explores the various types of visualizations and color
schemes used to represent molecular data. It also discusses the
different visualization tools available for visualizing molecular data.

## Types of visualizations {#section:types_of_visualizations}

There are several methods for representing molecular data, each serving
a different purpose and providing a different level of detail. The
methods most relevant to this work are the following three types: ball
and stick, surface, and cartoon. The following sections describe these
methods in more detail.

### Ball and stick {#subsection:ball_and_stick}

The ball and stick representation displays atoms as spheres and bonds as
cylindrical connections between these spheres. It provides a simple and
intuitive visualization of a molecule's atomic structure. It highlights
individual atoms and their bonds, including their bond types.
[@tsai2003introduction] However, it is not suitable for visualizing
larger macromolecules due to the enormous number of atoms and bonds that
would need to be displayed.

Examples of ball and stick representations are shown in Figures
[1.1](#fig:aspirin){reference-type="ref" reference="fig:aspirin"},
[\[fig:element_symbol\]](#fig:element_symbol){reference-type="ref"
reference="fig:element_symbol"}, and
[\[fig:partial_charges_color_theme-bas\]](#fig:partial_charges_color_theme-bas){reference-type="ref"
reference="fig:partial_charges_color_theme-bas"}.

### Surface {#subsection:surface}

Surface representations depict the three-dimensional shape of a molecule
by displaying its solvent-accessible surface. This representation
provides a more accurate representation of the molecule's overall shape
and size, making it especially useful for studying macromolecular
interactions and the binding of small molecules. For example, surface
visualization can be used in molecular dynamics to identify potential
binding sites on a protein surface, which can then be targeted by drug
molecules. [@MIAO20191049]

Figures [1.5](#fig:psilocybin){reference-type="ref"
reference="fig:psilocybin"} and
[\[fig:partial_charges_color_theme-surface\]](#fig:partial_charges_color_theme-surface){reference-type="ref"
reference="fig:partial_charges_color_theme-surface"} show examples of
the surface representation.

### Cartoon {#subsection:cartoon}

Cartoon representations simplify the molecular structure by focusing on
the secondary structure elements of proteins and nucleic acids, such as
alpha helices and beta sheets. Alpha helices are often depicted as
spiral-like structures, whereas beta sheets as arrows. This type of
visualization is beneficial for visualizing large macromolecular
complexes, as it highlights the overall organization and topology of the
molecule without the clutter of atomic details.
[@richardson1985schematic]

Figure [\[fig:cartoon\]](#fig:cartoon){reference-type="ref"
reference="fig:cartoon"} shows an example of an alpha helix and beta
sheet of a protein. Examples of cartoon representations are shown in
Figures [1.2](#fig:hemoglobin){reference-type="ref"
reference="fig:hemoglobin"} and
[\[fig:partial_charges_color_theme-cartoon\]](#fig:partial_charges_color_theme-cartoon){reference-type="ref"
reference="fig:partial_charges_color_theme-cartoon"}.

## Coloring of molecular visualizations {#subsection:coloring_of_molecular_visualizations}

The coloring scheme used to represent the molecular structure is equally
important as the visualization type. Coloring molecular structures can
provide additional information and help emphasize specific molecule
features and properties.

-   **Element symbol**: atoms are colored according to their chemical
    element (e.g., carbon in grey, oxygen in red, nitrogen in blue).
    This coloring is useful for distinguishing between different types
    of atoms in a molecule. See Figure
    [\[fig:element_symbol\]](#fig:element_symbol){reference-type="ref"
    reference="fig:element_symbol"} for an example.

-   **Chain identifier**: atoms or residues are colored according to
    their chain identifier (e.g., chain A in blue, chain B in red). This
    coloring is useful for distinguishing between different chains in a
    macromolecular complex. See Figure
    [\[fig:chain_id_coloring\]](#fig:chain_id_coloring){reference-type="ref"
    reference="fig:chain_id_coloring"} for an example.

-   **Partial atomic charge**: this coloring is explained in Section
    [1.2](#section:partial_atomic_charges){reference-type="ref"
    reference="section:partial_atomic_charges"}. See Figure
    [3.3](#fig:partial_charges_color_theme){reference-type="ref"
    reference="fig:partial_charges_color_theme"} for additional coloring
    examples.

<figure id="fig:coloring">

<figcaption>Coloring of molecular structures by various color
schemes.</figcaption>
</figure>

## Visualization software {#section:visualization_software}

There are many software tools available for visualizing molecular data.
Some of the most popular tools include MolScript
[@kraulis1991molscript], PyMOL [@delano2002pymol], VMD
[@humphrey1996vmd], and ChimeraX [@goddard2018ucsf]. More recently,
web-based visualization tools, such as NGL Viewer [@rose2015ngl],
LiteMol [@sehnal2017litemol], and Mol\* [@sehnal2021molstar], have
become popular thanks to their accessibility and ease of use.

The following sections will discuss the two web-based molecular
visualization tools used in this work, LiteMol and Mol\*.

### Litemol {#subsection:litemol}

LiteMol is an open-source tool suite for molecular data visualization.
It supports various file formats and offers a user-friendly interface
for creating visualizations. LiteMol provides essential visualization
types, including ball and stick, surface, and cartoon representations,
as well as options for customizing colors, lighting, and other display
settings. [@sehnal2017litemol]

Figure [2.2](#fig:litemol){reference-type="ref" reference="fig:litemol"}
shows an example of a LiteMol visualization of the 1CBS protein
structure.

<figure id="fig:litemol">
<div class="center">
<img src="figures/litemol.png" />
</div>
<figcaption>Litemol visualization of the 1CBS protein
structure.</figcaption>
</figure>

### Mol\* {#subsection:molstar}

Mol\* (/'molstar/) is another web-native molecular visualization tool,
developed as part of the wwPDB OneDep system for macromolecular
structure deposition and validation. Mol\* offers a wide range of
visualization options, including advanced features such as electron
density maps and validation reports. Mol\* supports many file formats,
including PDB, mmCIF, and PDBx/mmJSON. Like LiteMol, Mol\* is
platform-independent and can be accessed from any web browser.
[@sehnal2021molstar]

Mol\* emphasizes interactivity and offers various tools for manipulating
and analyzing the molecular structure, such as distance and angle
measurements, selection and display of specific residues, and custom
coloring schemes. Additionally, Mol\* provides integration with external
databases and services, such as UniProt, PDBe, and RCSB PDB, enabling
users to quickly access related information and resources.

The Mol\* library works in a modular fashion, where each representation,
color theme, and other feature is implemented as a separate provider.
This modular design allows for easy customization and extension of the
library. [@sehnal2021molstar]

<figure id="fig:molstar">
<div class="center">
<img src="figures/molstar.png" />
</div>
<figcaption>Mol* visualization of the 1CBS protein
structure.</figcaption>
</figure>

#### Mol\* state tree

To store information about the molecular structure and its
visualization, the Mol\* library uses a state tree. The state tree is a
tree data structure consisting of several layers, each of which contains
information about a specific aspect of the structure. The layers are
organized in a hierarchical manner, with each layer containing
information about the layer below it. The state tree is a key component
of the Mol\* library, as it allows for easy access to the data and
facilitates the implementation of various features. [@sehnal2021molstar]

<figure id="fig:state_tree">
<div class="center">
<img src="figures/state_tree.png" />
</div>
<figcaption>Mol* state tree.</figcaption>
</figure>

# Mol\* partial charges extension {#chapter:molstar_partial_charges_extension}

Visualizing partial atomic charges in molecules is an essential aspect
of computational chemistry research, aiding in analyzing complex
molecular structures. Mol\* provides an extensive range of features for
exploring molecular structures. However, the tool lacks the
functionality to color and label atoms and residues based on their
partial atomic charges. As mentioned in the , the Mol\* viewer's
predecessor, Litemol, supported this functionality. Nevertheless, since
Litemol is no longer supported, we saw the need to bring this
functionality to Mol\*.

This chapter describes the requirements for the extension, the custom
mmCIF categories necessary for storing the partial atomic charges, and
the implementation of the extension itself.

## Requirements {#section:requirements}

Firstly, the Mol\* extension should enable coloring atoms and residues
according to their corresponding atom or residue partial atomic charges.
By residue charges, it is meant the sum of the partial atomic charges of
all atoms within a residue. The extension should also support the ball
and stick, surface, and cartoon representations.

Secondly, it should describe the charge values of the atoms and
residues.

Thirdly, the extension should allow the user to provide multiple charge
sets for a single structure and to select which one to display. Finally,
the extension should be seamlessly integrated into the Mol\* library,
facilitating access to its features and functionality.

## Custom mmCIF categories {#section:custom_mmcif_categories}

Storing the structure and partial atomic charges in a single file was a
crucial aspect of the extension. It provides a smoother process of
loading the input structure file into the Mol\* viewer. If the charges
were stored separately, it would have been necessary to provide the
charge data to Mol\* by different means, e.g., through custom Mol\*
import controls.

For this purpose, we have chosen the mmCIF file format and designed two
custom mmCIF categories, one for storing the partial charge values for
each atom in the structure and another for storing metadata about the
charge sets.

The mmCIF format was chosen because it is widely used in the field of
structural biology and offers several advantages over other formats, as
discussed in [1.3.5](#subsection:mmcif){reference-type="ref"
reference="subsection:mmcif"}. The custom categories allow us to store
information about the partial atomic charges separately from the other
structural data while still being able to access it within the same
file.

The category `_sb_ncbr_partial_atomic_charges_meta` stores\
metadata about the charge sets, such as the method used to calculate the
charges and the type of the calculation method. The attributes of the
category are listed in Table
[3.1](#table:partial_atomic_charges_meta){reference-type="ref"
reference="table:partial_atomic_charges_meta"}.

::: {#table:partial_atomic_charges_meta}
  ----------------------------------------------------------------
  **Attribute name**    **Description**
  --------------------- ------------------------------------------
  id                    unique identifier of the charge set (e.g.,
                        '1')

  type                  type of the calculation method (e.g.,
                        'empirical', 'quantum')

  method                computation method used to calculate the
                        charge set (e.g., 'EQeq', 'EEM/Racek 2016
                        (ccd2016_npa)')
  ----------------------------------------------------------------

  : Attributes of the `_sb_ncbr_partial_atomic_charges_meta` mmCIF
  category.
:::

The category `_sb_ncbr_partial_atomic_charges` maps together the atoms
of the structure and their corresponding charges. The attributes of the
category are listed in Table
[3.2](#table:partial_atomic_charges){reference-type="ref"
reference="table:partial_atomic_charges"}.

::: {#table:partial_atomic_charges}
  -----------------------------------------------------------------------
  **Attribute name**    **Description**
  --------------------- -------------------------------------------------
  type_id               pointer to the `id` item in the metadata category

  atom_id               pointer to the `_atom_site.id` item described in
                        [1.3.5](#subsection:mmcif){reference-type="ref"
                        reference="subsection:mmcif"}

  charge                partial charge value for the atom (float value)
  -----------------------------------------------------------------------

  : Attributes of the `_sb_ncbr_partial_atomic_charges` mmCIF category.
:::

Figure [3.1](#fig:mmcif_erd){reference-type="ref"
reference="fig:mmcif_erd"} provides a detailed illustration of the
custom mmCIF categories and their relationships.

<figure id="fig:mmcif_erd">
<div class="center">
<img src="figures/mmcif_erd.png" />
</div>
<figcaption>Diagram of the relationship of the custom mmCIF categories
for storing partial atomic charges.</figcaption>
</figure>

## Implementation {#section:implementation}

This section covers the implementation of the partial atomic charge
extension for the Mol\* viewer. The extension consists of multiple
providers, each serving a specific functionality, such as supplying the
partial charge data and coloring the structural elements based on their
charges.

The extension was created using TypeScript, a superset of JavaScript
that adds static typing and other features to the language. The Mol\*
library is also written in TypeScript, so the extension was written in
the same language to ensure compatibility.

### Property provider {#subsection:property_provider}

In order to retrieve the charges from the mmCIF file, it is necessary to
parse the file. This is done by the Mol\* library, which parses the
mmCIF file and provides the parsed mmCIF file data in the form of a
`MmcifFormat` object. The purpose of this provider is to process the
charge data from this object and supply the charge data to the rest of
the extension providers through a custom property. The interface of this
property is depicted in Figure
[\[figure:charge_data_structure\]](#figure:charge_data_structure){reference-type="ref"
reference="figure:charge_data_structure"}.

The atom charges are stored in the `typeIdToAtomIdToCharge` map. The map
is indexed by the charge set (typeId) and the atom id. The atom id is a
pointer to the atom_site.id. item in the mmCIF file. The atom charges
are retrieved from the mmCIF file by iterating over the atom_site.id
category and retrieving the charge values for each atom. The charge
values are then stored in the `typeIdToAtomIdToCharge` map.

The residue charges are calculated by summing the charges of the atoms
that make up the residue. The residue charge is then stored in the
`typeIdToResidueIdToCharge` map.

The maximum absolute charge values of the atoms and residues are
calculated and stored in the `maxAbsoluteAtomCharges` and\
`maxAbsoluteResidueCharges` maps. These maps are used in the color theme
provider to normalize the charges to the range of 0 to 1. Additionally,
the maximum absolute charge values are used to calculate the color
interpolations in the color theme provider. Furthermore, the maximum
absolute charge of both atoms and residues is calculated and stored in
the `maxAbsoluteChargesAll` map.

Lastly, the method name used to calculate the charges of a given charge
set is stored in the `typeIdToMethod` map. This map is used to display
the method name in the UIs.

<figure id="fig:property_provider_interface">
<div class="center">
<img
src="out/figures/uml/interface/custom model property interface.png" />
</div>
<figcaption>Interface of the custom model property for storing partial
atomic charges.</figcaption>
</figure>

### Color theme provider {#subsection:color_theme_provider}

This provider serves as the central component of the extension, with its
primary function being to assign colors to atoms and residues based on
their charges. It achieves this by using the ColorTheme API provided by
Mol\*. The ColorTheme API is a mechanism for assigning colors to
structural elements of a molecule. These structural elements can be
atoms, residues, bonds, and so on. The API is based on the concept of a
ColorTheme object, which is a collection of color assignments for
structural elements. The ColorTheme object is then used by the Mol\*
library to color the structural elements of the molecule.

For the purposes of this extension, it was necessary to color two
structural elements - atoms and residues. For both of these structural
elements the charges were retrieved from the provider described in the
previous section
[\[subsection:charges_provider\]](#subsection:charges_provider){reference-type="ref"
reference="subsection:charges_provider"}, which provided charges for
atoms and residues.

To establish the color for a given charge, two color interpolations are
employed: one for negative charges and another for positive charges.
Atoms with positive charges receive a color from a white-to-blue color
interpolation, while atoms with negative charges are assigned a color
from a white-to-red color interpolation.

<figure id="fig:partial_charges_color_theme">

<figcaption>Partial atomic charges color theme for different
visualization types.</figcaption>
</figure>

### Label provider {#subsection:label_provider}

Having colored the structural elements, it was also necessary to create
a label provider, which would assign labels that describe the charge of
the structural element. In order to determine which element is
highlighted, Mol\* uses the object Loci. A Loci object is utilized for
general selections and highlights. Consequently, it is essential to
first extract the location from the Loci object in order to obtain the
atom ID. The charge is acquired from the property provider, and the
label is an HTML string that conveys the charge of the atom or residue.
An example of the label can be seen in in the right-hand corner in
figure [5.3](#){reference-type="ref" reference=""}.

### Controls {#subsection:controls}

The controls are implemented automatically by the Mol\* library based on
the parameters of the providers. The user has access to controls of the
charge set and the color theme. The charge set controls allow the user
to select the charge set to display. The color theme controls allow the
user to specify the following parameters:

-   **Charge Range**: Sets the range of the color interpolation

-   **Use Range**: Toggles whether the range of the color interpolation
    is automatically calculated or manually specified.

-   **Charge Type**: Selects whether to display the partial atomic
    charges or the partial residue charges.

The controls are depicted in Figure
[3.4](#fig:controls-charge-set){reference-type="ref"
reference="fig:controls-charge-set"}.

<figure id="fig:controls-charge-set">

<figcaption>Extension controls.</figcaption>
</figure>

## Mol\* viewer plugin {#section:molstar_viewer_plugin}

In addition to the partial charges extension, it was necessary to create
a custom Mol\* viewer plugin. By using a custom plugin, it is possible
to create new behaviors which are not provided by the standard Mol\*
viewer. This section describes the development of the plugin and the new
custom behaviors which it provides.

### Used technologies

The Mol\* viewer plugin was developed using the Vite build tool
[@vitejs]. This build tool was a crucial aspect of the development of
the plugin since it allowed for a significantly faster development cycle
compared to the Webpack bundler provided by the Mol\* library.

The plugin is written in Typescript and uses the Mol\* library. It is
bundled using Rollup [@rollup], a module bundler for Javascript, and
published to NPM [@npm], a package manager for Javascript applications.

### Structure of the plugin

The plugin is designed as a Typescript class. The class structure is
depicted in Figure [3.5](#fig:plugin_structure){reference-type="ref"
reference="fig:plugin_structure"}. It contains a method for creating the
plugin and loading the structure file. Furthermore, it includes four
attributes that are JavaScript objects with methods that provide the
following functionality:

-   *Charges* - provides methods for setting the current charge set and
    retrieving information about the charge sets.

-   *Color* - provides methods for setting the color theme.

-   *Type* - provides methods for setting the visualization type.

-   *Behavior* - provides a method for focusing on a specific atom.

<figure id="fig:plugin_structure">
<div class="center">
<img src="out/figures/uml/viewer/viewer.png" />
</div>
<figcaption>Diagram of the custom Mol* viewer class.</figcaption>
</figure>

The methods provided by the *Color* and *Type* objects use the private
methods *updateColor* and *updateType* for changing the color theme and
visualization type of the loaded structure by iterating over the Mol\*
state tree and updating the representation nodes.

The *Behavior* object provides a method for focusing on a specific atom
of the structure. The focus functionality is achieved by selecting the
desired atom using the MolScript [@kraulis1991molscript] query language
supported in the Mol\* library. The query language is used to identify
and select the atom by the following parameters:

-   *labelCompId* - an identifier for the chain containing the residue
    with the atom.

-   *labelSeqId* - sequence number of the residue containing the atom.

-   *labelAtomId* - an identifier for the atom in the residue.

The MolScript selection query is depicted in Figure
[3.6](#fig:focus){reference-type="ref" reference="fig:focus"}. Once the
atom is selected, the selection is highlighted and focused on with
methods provided by the Mol\* library.

<figure id="fig:focus">
<div class="minted">
<p><span>Typescript</span> const selection =
Script.getStructureSelection( (Q) =&gt;
Q.struct.generator.atomGroups(<span> ’atom-test’: Q.core.logic.and([
Q.core.rel.eq([Q.struct.atomProperty.macromolecular. label_comp_id(),
labelCompId]), Q.core.rel.eq([Q.struct.atomProperty.macromolecular.
label_seq_id(), labelSeqId]),
Q.core.rel.eq([Q.struct.atomProperty.macromolecular. label_atom_id(),
labelAtomId]), ]), </span>), data );</p>
</div>
<figcaption>MolScript query for selecting an atom.</figcaption>
</figure>

# Atomic Charge Calculator II {#chapter:atomic_charge_calculator_ii}

Atomic Charge Calculator II (ACC II) is a web application for
calculating partial atomic charges for structure files. The application
is built using Flask for the backend and Javascript with Bootstrap for
the frontend. The core of the ACC II application is the ChargeFW2
program, which is used to calculate the partial atomic charges. For
visualizing the calculation results, the application uses the Litemol
viewer. [@racek2020acc2]

However, since the Litemol viewer is no longer supported, it was
necessary to replace it with its modern counterpart, Mol\*. This chapter
describes the incorporation of the Mol\* viewer into the ACC II
application. We first discuss the modifications to the ChargeFW2
program, then explain the changes made to the ACC II application's
backend and frontend to support calculations of multiple charge sets,
and lastly, we describe the integration of the Mol\* viewer into the
ACC II application.

## Extension of ChargeFW2 {#section:chargefw2_extension}

As described in Section [1.2.2](#section:chargfw2){reference-type="ref"
reference="section:chargfw2"}, ChargeFW2 is a C++ program for computing
partial atomic charges. The program supports the following input file
formats: SDF, MOL2, PDB, and mmCIF, all of which are described in
Section [1.3](#section:chemical_file_formats){reference-type="ref"
reference="section:chemical_file_formats"}.

The program parses the necessary atom and bond data for each molecule in
the input file and stores it in a `Molecule` object. These objects are
stored in a `MoleculeSet` object over which the program then iterates
and calculates the partial atomic charges for each molecule.

The program outputs the charge results in multiple file formats. The
following Table
[4.1](#table:chargefw2_output_formats){reference-type="ref"
reference="table:chargefw2_output_formats"} lists the output file
formats generated by ChargeFW2 for the corresponding input file formats.

::: {#table:chargefw2_output_formats}
  **Input format**   **Output formats**
  ------------------ --------------------
  SDF, MOL2          TXT, MOL2
  PDB                TXT, PQR
  mmCIF              TXT, PQR, mmCIF

  : ChargeFW2 output file formats.
:::

As seen in Table
[4.1](#table:chargefw2_output_formats){reference-type="ref"
reference="table:chargefw2_output_formats"}, ChargeFW2 already outputs a
mmCIF file for a corresponding mmCIF input file. The format of this
output mmCIF file stores the partial atomic charges in a custom\
`_atom_site.fw2_charge` item. However, this format is incompatible with
the Mol\* viewer, which expects the partial atomic charges to be stored
in the custom mmCIF categories described in Section
[3.2](#section:custom_mmcif_categories){reference-type="ref"
reference="section:custom_mmcif_categories"}. Therefore, modifying the
ChargeFW2 output was necessary.

The following subsections describe in detail how ChargeFW2 was modified
to produce the custom mmCIF file format for all the input files,
regardless of the format.

### mmCIF {#mmcif}

For mmCIF input files, the program simply appends the custom categories
to the input file. The program uses the GEMMI library [@wojdyr2022gemmi]
to parse the input mmCIF file into a `Block` object, which provides
access to all mmCIF categories in the file. Before appending the charge
categories, the program first removes alternative conformations from the
`Block` object. Removing alternative conformations is necessary because
the custom Mol\* viewer plugin does not support alternative
conformations with the partial atomic charge coloring. The program then
appends the custom charge categories to the `Block` object and writes
the `Block` object to the output mmCIF file.

### PDB {#pdb}

The PDB input files are first converted to mmCIF format using the GEMMI
library. The PDB file is first parsed into a `Structure` object, then
converted into a `Block` object. After converting the PDB file to mmCIF,
it was necessary to remove the `_chem_comp` category from the `Block`
object. GEMMI generates this category by default. However, it is
unnecessary for the Mol\* viewer, and its presence causes the viewer to
visualize the structure incorrectly. The program then proceeds the same
way as for the mmCIF input files.

### SDF and MOL2

SDF and MOL2 input files are converted to mmCIF format using the atom
and bond data stored in the `Molecule`. The program first creates a
`Block` object, which it populates with the `_atom_site` category using
the atom data. Secondly, it adds the `_chem_comp_bond` category using
the bond data. The latter category describes the bonds between the atoms
and is necessary for the Mol\* viewer to visualize the bond orders
correctly. The program then proceeds the same way as for the mmCIF input
files.

### Result {#result .unnumbered}

The ChargeFW2 produces a mmCIF file for each calculation, which is
compatible with the Mol\* viewer. This extension unifies the output file
formats and enables sending just one file to the Mol\* viewer on the
frontend. Table
[4.2](#table:new_chargefw2_output_formats){reference-type="ref"
reference="table:new_chargefw2_output_formats"} lists the updated output
file formats generated by ChargeFW2 for the corresponding input file
formats.

::: {#table:new_chargefw2_output_formats}
  **Input format**   **Output formats**
  ------------------ --------------------
  SDF, MOL2          TXT, mmCIF, MOL2
  PDB, mmCIF         TXT, mmCIF, PQR

  : Updated ChargeFW2 output file formats.
:::

## Multicharge support {#section:multicharge_support}

The ACC II application allows the user to select the method and
parameters that will be used to calculate the partial atomic charges for
the user's input file. Once the user confirms their selection, the
application sends it to the backend, which runs the ChargeFW2 program
with the chosen method and parameters. The application then displays the
results of the calculation to the user.

However, the application only supports one calculation per request and
does not support the visualization of multiple charge sets. This
limitation was previously caused by the Litemol viewer, which only
supported one charge set per structure. Since the Mol\* viewer supports
multiple charge sets, the ACC II application was also modified to
support multiple charge sets.

The following subsections describe the necessary changes made to the
ACC II application to facilitate multiple calculations per request and
the visualization of multiple charge sets.

### Frontend changes

As explained in the previous section, the ACC II application limits
users to select only one combination of methods and parameters. This
limitation was addressed by introducing new controls to the calculation
setup.

Figure [4.1](#fig:new_setup){reference-type="ref"
reference="fig:new_setup"} shows the updated setup page for the ACC II
application. The page now contains a list of calculations, each
representing a combination of methods and parameters. The list is
initially empty, and the user can add a new calculation to the list by
selecting the desired method and parameters from the drop-down menus and
clicking the *Add to calculation* button. The user can also remove any
calculation from the list by clicking the cross button next to the
calculation name.

Once the user clicks the *Compute* button, the list of calculations is
sent to the backend, where it is used to generate the desired charge
sets for the user's input file.

<figure id="fig:new_setup">
<div class="center">
<img src="figures/new_setup.png" />
</div>
<figcaption>Updated setup page for the ACC II application.</figcaption>
</figure>

### Backend changes

The Flask backend of the ACC II application was modified to support
multiple charge calculations per request. The backend now receives a
list of calculations from the frontend, which it uses to generate the
desired charge sets for the user's input file. It does this by running
the ChargeFW2 program for each calculation in the list and generating
the output file formats described in Table
[4.2](#table:new_chargefw2_output_formats){reference-type="ref"
reference="table:new_chargefw2_output_formats"}. The backend then parses
the charge values from the output TXT files and stores them in a
dictionary, creating a mapping between the charge set name and the
charge values.

After all of the calculations are completed, the dictionary is used to
generate a single mmCIF file. Firstly, the backend parses one of the
output mmCIF files generated by ChargeFW2 into a `Block` object using
the GEMMI library. The backend then iterates over the dictionary and
appends the charge values to the `Block` object under the custom charge
categories described in Section
[3.2](#section:custom_mmcif_categories){reference-type="ref"
reference="section:custom_mmcif_categories"}. Lastly, the backend writes
the `Block` object to a new mmCIF file. This mmCIF file is then sent to
the frontend, where it is loaded into the Mol\* viewer.

## Mol\* viewer integration {#section:viewer_integration}

Figure [4.2](#fig:result_page){reference-type="ref"
reference="fig:result_page"} shows the result page for the ACC II
application with the incorporated Mol\* viewer. The result page
initializes the custom viewer plugin and loads the mmCIF file generated
by the backend. The loaded structure can then be visualized as a ball
and stick model, a surface model, or, if applicable, a cartoon model.
The page also provides controls for coloring the structure by partial
atomic charges or by the element symbol of each atom. The user can also
set the maximum charge value, which will be used for the partial atomic
charge coloring.

The result page also contains two dropdown menus. The structure dropdown
menu contains all the structures the user provides in their input file.
The charge set dropdown menu contains all the charge sets generated by
the backend according to the user's selection on the setup page.

<figure id="fig:result_page">
<div class="center">
<img src="figures/results-full.png" />
</div>
<figcaption>Updated result page for the ACC II application.</figcaption>
</figure>

Finally, the user can download all the output files generated by the
backend in a ZIP archive by clicking the *Download charges* button.
Figure [4.3](#fig:output_dir_structure){reference-type="ref"
reference="fig:output_dir_structure"} shows the directory structure of
the ZIP archive. The `cif` directory contains mmCIF files for each
structure with all the charge sets. The name of each mmCIF file is the
same as the name of the corresponding structure. The names of each file
in the `txt`, `mol2`, and `pqr` directories are prefixed with the name
of the structure and the name of the parameters used in the calculation
for the given charge set.

<figure id="fig:output_dir_structure">

<figcaption>Directory structure of the output ZIP archive.</figcaption>
</figure>

# αCharges {#chapter:alphacharges}

αCharges (AlphaCharges) is a web application for calculating partial
atomic charges for structures from AlphaFoldDB [@varadi2021alphafold], a
database of protein structures predicted by AlphaFold2
[@jumper2021alphafold]. The αCharges application protonates the protein
structures (i.e., adds hydrogens) and calculates the partial atomic
charges for the structures by the SQE+qp [@schindler2021sqe] empirical
method. [@schindler2023alphacharges]

During the development of the αCharges application, the Mol\* viewer was
incorporated into the application to visualize the calculated partial
atomic charges. The creators of the AlphaCharge application requested
two additional features: a color theme for coloring the structure by the
pLDDT confidence score and a page for visualizing problematic atoms in
the structure.

The following sections describe the changes made to the Mol\* viewer to
support the αCharges application and implement the new features.

## Integration of the the Mol\* viewer

The αCharges application shares the architecture with the ACC II
application. The frontend is written in Javascript with the Bootstrap
framework, and the backend is written in Python and uses the Flask
framework. [@schindler2023alphacharges] This shared architecture allowed
the integration of the Mol\* viewer into the αCharges application with
minimal adjustments. As with the ACC II application, the Mol\* viewer is
incorporated into the result page by initializing the plugin viewer,
loading the mmCIF file generated by the backend, and mounting the
controls for managing the viewer.

## Coloring by pLDDT confidence score

AlphaFold2 generates a confidence score for each residue in the
predicted protein structures using a measure called pLDDT. The
confidence score ranges between 0 and 100, where higher values indicate
higher confidence levels. [@varadi2021alphafold] The AlphaFoldDB
includes the confidence scores and predicted protein structures in the
mmCIF file format. These confidence scores are stored in the mmCIF file
under the following categories [@mmcif_dictionary]:

-   `_ma_qa_metric` - contains details of the metrics use to assess
    model quality.

-   `_ma_qa_metric_local` - contains information about the local quality
    scores calculated at the residue-level.

-   `_ma_qa_metric_global` - contains information about the global
    quality scores calculated at the model-level.

The Mol\* library supports coloring structures by the pLDDT confidence
score. Figure [5.1](#fig:alphafold-coloring){reference-type="ref"
reference="fig:alphafold-coloring"} shows the structure of a protein
colored by the pLDDT confidence score. The coloring is based on the
pLDDT confidence score of each residue. The confidence score of each
residue is mapped to a set of colors, ranging from orange (low
confidence) to dark blue (very high confidence).

<figure id="fig:alphafold-coloring">
<div class="center">
<img src="figures/alphafold_coloring.png" style="width:7cm" />
</div>
<figcaption>Coloring of a protein structure by the pLDDT confidence
score.</figcaption>
</figure>

To incorporate this coloring into αCharges, the backend of the
application was extended to include the confidence scores in the output
mmCIF file. This mmCIF file is sent to the frontend where it is loaded
into the Mol\* viewer. The αCharges application adds a new control to
the result page for switching to the pLDDT color theme. Figure
[5.2](#fig:alpha-charges-results){reference-type="ref"
reference="fig:alpha-charges-results"} shows the result page of the
αCharges application and highlights the new coloring control.

<figure id="fig:alpha-charges-results">
<div class="center">
<img src="figures/alpha-charges-results.png" />
</div>
<figcaption>Result page of the αCharges application. The control for
switching to the pLDDT color theme is highlighted in red.</figcaption>
</figure>

## Problematic structure page

The αCharges application cannot calculate the partial atomic charges for
all protein structures. The AlphaFold2 algorithm can incorrectly predict
some structures or the application can fail to protonate the structure.
[@schindler2023alphacharges] In such instances, the application
automatically redirects the user to an error page, which displays the
problematic structure in the Mol\* viewer and an error message.

The error message is generated by the backend and contains a description
of the error together with a list of each atom in the problematic
structure that caused the error. When the user hovers over an atom in
the list, a pop-up text is displayed explaining the probable cause of
the error for the given atom. Figure
[5.3](#fig:wrong_structure_text){reference-type="ref"
reference="fig:wrong_structure_text"} shows the error message for a
structure wrongly predicted by AlphaFold2 and the explanation as to why
the atom *GLN 33 CD* was wrongly predicted.

<figure id="fig:wrong_structure_text">
<div class="center">
<img src="figures/wrong_structure_text.png" style="width:7cm" />
</div>
<figcaption>Explanation of calculation error for atom <em>GLN 33
CD</em>.</figcaption>
</figure>

Additionally, when the user clicks on an atom in the list, the Mol\*
viewer is focused on the atom. This allows the user to inspect the
problematic atom in the structure. Figure
[5.4](#fig:wrong_structure_focus){reference-type="ref"
reference="fig:wrong_structure_focus"} shows the Mol\* viewer focused on
the atom *GLN 33 CD* of the problematic structure Q55GB6 from
AlphaFoldDB.

<figure id="fig:wrong_structure_focus">
<div class="center">
<img src="figures/wrong_structure_focus.png" />
</div>
<figcaption>Focus on the atom GLN 33 CD.</figcaption>
</figure>

# Conclusion {#conclusion .unnumbered}

This thesis aimed to advance the field of computational chemistry by
providing researchers with a modern visualization of partial atomic
charges in Mol\* and by expanding the capabilities of the Atomic Charge
Calculator II and αCharges web applications.

We successfully extended the capabilities of the Mol\* viewer to include
the visualization of partial atomic charges. We incorporated the
extended Mol\* viewer into the Atomic Charge Calculator II and αCharges
web applications.

We further enhanced the Atomic Charge Calculator II application with
support for multiple calculations for a single request and implemented a
new page for the αCharges web application for visualizing problematic
atoms.

These advancements provide researchers with enhanced visualization
capabilities and user interfaces for calculating and analyzing partial
atomic charges. The significance of these improvements to the field of
computational chemistry is substantiated by their contribution to a
publication in the Nucleic Acids Research journal.

All source code developed in this work is available in the attachments
and on GitHub. Links to the GitHub repositories can be found in Appendix
[6](#appendix:source-code){reference-type="ref"
reference="appendix:source-code"}. The extension to the Mol\* viewer is
also available in the official Mol\* repository.

::: appendices
# Source code {#appendix:source-code}

All source code can be found in the attachments and on GitHub. Below are
the links to the GitHub repositories:

-   αCharges:\
    <https://github.com/sb-ncbr/AlphaCharges>

-   Atomic Charge Calculator II:\
    <https://github.com/sb-ncbr/AtomicChargeCalculator2>

-   ChargeFW2:\
    <https://github.com/sb-ncbr/ChargeFW2>

-   Mol\* viewer plugin:\
    <https://github.com/MergunFrimen/molstar-partial-charges>

# αCharges: partial atomic charges for AlphaFold structures in high quality {#appendix:alpha-charges}
:::

[^1]: Electronegativity is a measure of an atom's ability to attract
    electrons towards itself. [@clark2018biology]
